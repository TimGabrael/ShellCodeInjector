#include <iostream>
#include <Windows.h>
#include <fstream>
#include <sstream>

// GetModuleHandle(L"KERNELBASE.dll");
unsigned char _code_raw[] = {
	 0x4B, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x6C, 0x00,
	 0x42, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x64, 0x00,
	 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0xEF, 0xAA, 0x94, 0x63, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x00, 0x00, 0x00,
	 0xA0, 0x00, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00, 0x68, 0x04, 0x00, 0x00,
	 0x18, 0x00, 0x00, 0x00, 0x02, 0x80, 0x02, 0x80, 0x54, 0x10, 0x00, 0x00,
	 0x04, 0x00, 0x00, 0x00, 0x58, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
	 0x1B, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
	 0x10, 0x11, 0x00, 0x00, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x10, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x64, 0x61,
	 0x74, 0x61, 0x00, 0x00, 0x3C, 0x10, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,
	 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x76, 0x6F, 0x6C, 0x74, 0x6D,
	 0x64, 0x00, 0x00, 0x00, 0x68, 0x10, 0x00, 0x00, 0xA8, 0x00, 0x00, 0x00,
	 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x24, 0x7A, 0x7A, 0x7A, 0x64, 0x62,
	 0x67, 0x00, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00, 0xD4, 0x00, 0x00, 0x00,
	 0x2E, 0x74, 0x65, 0x78, 0x74, 0x24, 0x6D, 0x6E, 0x00, 0x00, 0x00, 0x00,
	 0xE4, 0x11, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x2E, 0x78, 0x64, 0x61,
	 0x74, 0x61, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00,
	 0x2E, 0x70, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00,
	 0x60, 0x00, 0x00, 0x00, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x31,
	 0x00, 0x00, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
	 0x2E, 0x72, 0x73, 0x72, 0x63, 0x24, 0x30, 0x32, 0x00, 0x00, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x89, 0x6C, 0x24,
	 0x10, 0x48, 0x89, 0x74, 0x24, 0x18, 0x57, 0x65, 0x48, 0x8B, 0x04, 0x25,
	 0x60, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x2D, 0xD5, 0xFE, 0xFF, 0xFF, 0x40,
	 0xB7, 0x01, 0x48, 0x89, 0x5C, 0x24, 0x10, 0x48, 0x8B, 0x48, 0x18, 0x4C,
	 0x8B, 0x59, 0x28, 0x49, 0x8B, 0xF3, 0x66, 0x90, 0x4C, 0x3B, 0xDE, 0x75,
	 0x05, 0x40, 0x84, 0xFF, 0x74, 0x70, 0x40, 0x32, 0xFF, 0x49, 0x8D, 0x43,
	 0x20, 0x48, 0x85, 0xC0, 0x74, 0x5E, 0x48, 0x8B, 0x18, 0x48, 0x85, 0xDB,
	 0x74, 0x56, 0x49, 0x8B, 0x43, 0x50, 0x48, 0x85, 0xC0, 0x74, 0x4D, 0x48,
	 0x3B, 0xC5, 0x74, 0x61, 0x4C, 0x8B, 0xCD, 0x90, 0x44, 0x0F, 0xB7, 0x00,
	 0x45, 0x0F, 0xB7, 0x11, 0x66, 0x45, 0x3B, 0xC2, 0x74, 0x26, 0x41, 0x8D,
	 0x50, 0xBF, 0x41, 0x8D, 0x48, 0xE0, 0x66, 0x41, 0x83, 0xC0, 0x20, 0x66,
	 0x83, 0xFA, 0x1F, 0x66, 0x44, 0x0F, 0x47, 0xC1, 0x66, 0x45, 0x3B, 0xC2,
	 0x75, 0x1A, 0x48, 0x83, 0xC0, 0x02, 0x49, 0x83, 0xC1, 0x02, 0xEB, 0xCC,
	 0x66, 0x45, 0x85, 0xC0, 0x74, 0x23, 0x48, 0x83, 0xC0, 0x02, 0x49, 0x83,
	 0xC1, 0x02, 0xEB, 0xBC, 0x4D, 0x8B, 0x5B, 0x08, 0xEB, 0x86, 0x33, 0xC0,
	 0x48, 0x8B, 0x5C, 0x24, 0x10, 0x48, 0x8B, 0x6C, 0x24, 0x18, 0x48, 0x8B,
	 0x74, 0x24, 0x20, 0x5F, 0xC3, 0x48, 0x8B, 0x6C, 0x24, 0x18, 0x48, 0x8B,
	 0xC3, 0x48, 0x8B, 0x5C, 0x24, 0x10, 0x48, 0x8B, 0x74, 0x24, 0x20, 0x5F,
	 0xC3, 0xCC, 0xCC, 0xCC, 0x01, 0x23, 0x07, 0x00, 0x23, 0x34, 0x02, 0x00,
	 0x0B, 0x64, 0x04, 0x00, 0x0B, 0x54, 0x03, 0x00, 0x0B, 0x70, 0x00, 0x00,
	 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x11, 0x00, 0x00,
	 0xE1, 0x11, 0x00, 0x00, 0xE4, 0x11,
};

typedef void* (_stdcall*PFUNC)(const char*);

PFUNC MapFunction(const char* fileName, const char* functionName)
{
	std::string dllFile = std::string(fileName) + ".dll";
	std::string mapFile = std::string(fileName) + ".map";
	FILE* f = NULL;
	errno_t err = fopen_s(&f, dllFile.c_str(), "rb");
	if (!f || err) return nullptr;

	IMAGE_DOS_HEADER dosHeader = { 0 };
	fread(&dosHeader, sizeof(dosHeader), 1, f);
	fseek(f, dosHeader.e_lfanew, SEEK_SET);
	
	IMAGE_NT_HEADERS ntHeader = { 0 };
	fread(&ntHeader, sizeof(ntHeader), 1, f);

	IMAGE_SECTION_HEADER secHeader = { 0 };

	for (int i = 0; i < ntHeader.FileHeader.NumberOfSections; i++)
	{
		fread(&secHeader, sizeof secHeader, 1, f);
		if (strncmp((const char*)secHeader.Name, ".text", 8) == 0)
		{
			uint8_t* raw_data = new uint8_t[secHeader.SizeOfRawData];
			fseek(f, secHeader.PointerToRawData, SEEK_SET);
			fread(raw_data, secHeader.SizeOfRawData, 1, f);
			fclose(f);

			DWORD old_flag;
			VirtualProtect(raw_data, secHeader.SizeOfRawData, PAGE_EXECUTE_READWRITE, &old_flag);

			std::ifstream stream(mapFile.c_str());
			if (!stream.is_open()) return nullptr;

			std::string prevElement;
			std::string element;
			uintptr_t base = 0x0;
			uintptr_t code_start = 0;
			while (stream >> element)
			{
				if (!base)
				{
					if (element == "Start")
					{
						std::stringstream ss;
						ss << prevElement;
						ss >> std::hex >> base;
					}
				}
				else if (!code_start)
				{
					if (prevElement == functionName)
					{
						std::stringstream ss;
						ss << element;
						ss >> std::hex >> code_start;
					}
				}
				else break;
				prevElement = element;
			}

			uintptr_t start = code_start - base - 0x1000;
			return (PFUNC)(raw_data + start);
		}
	}

	fclose(f);

	return nullptr;
}



int main()
{
	PFUNC res = MapFunction("ShellCode1", "_code");
	if (res)
	{
		//for (int i = 0; i < 4000; i++)
		{
			const char* lookingFor = "AccessCheck";
			void* out = (PIMAGE_EXPORT_DIRECTORY)res(lookingFor);
			void* addr = GetProcAddress(GetModuleHandle(L"KERNELBASE.dll"), lookingFor);
			
			intptr_t diff = (intptr_t)out - (intptr_t)addr;
			printf("%p, addr %p, diff %p\n", out, addr, diff);

		}
	}
	system("pause");
}
